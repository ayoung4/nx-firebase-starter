make sure youre logged in with correct account

> firebase logout

> firebase login

create a new firebase project under same account

create firestore/rtdb if required

> firebase init

choose project and required components

> git add . && git commit -m "firebase init"

add @nrwl/node and @nrwl/react

> yarn add @nrwl/node @nrwl/react

create a new node app

> nx g @nrwl/node:app functions
> yarn add firebase-functions firebase-admin

create a new react app

> nx g @nrwl/react:app console

update firebase.json:

{
  "database": {
    "rules": "database.rules.json"
  },
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": {
    "source": "dist/apps/functions"
  },
  "hosting": [
    {
      "target": "console",
      "public": "dist/apps/console",
      "ignore": [
        "**/.*"
      ],
      "headers": [
        {
          "source": "*.[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f].+(css|js)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "public,max-age=31536000,immutable"
            }
          ]
        }
      ],
      "rewrites": [
        {
          "source": "**",
          "destination": "/index.html"
        }
      ]
    }
  ],
  "storage": {
    "rules": "storage.rules"
  },
  "emulators": {
    "functions": {
      "port": 5001
    },
    "firestore": {
      "port": 8080
    },
    "database": {
      "port": 9000
    },
    "hosting": {
      "port": 5000
    },
    "pubsub": {
      "port": 8085
    },
    "ui": {
      "enabled": true
    }
  },
  "remoteconfig": {
    "template": "remoteconfig.template.json"
  }
}

remove autogenerated projects

> rm -rf functions public

add tools/scripts

> mkdir ./tools/scripts

add build-firebase-functions-package.json and install deps

> yarn add -D depcheck

// build-firebase-functions-package.json

import * as path from 'path';
import depcheck = require('depcheck');
import * as fs from 'fs';

const packageJson = require('../../package.json') // Take root NX package.json
const ROOT_PATH = path.resolve(__dirname + '/../..')
const distProjectPath = `${ROOT_PATH}/dist/apps/functions`

console.log('Creating cloud functions package.json file...')

let packageJsonStub = {
  engines: { node: '10' },
  main: 'main.js',
}

depcheck(
  distProjectPath,
  {
    package: {
      dependencies: packageJson.dependencies,
    },
  },
  unused => {
    let dependencies = packageJson.dependencies
    if (unused.dependencies.length > 0)
      unused.dependencies.reduce((acc, dep, i) => {
        delete acc[dep]
        return acc
      }, dependencies)

    fs.promises.mkdir(path.dirname(distProjectPath), { recursive: true }).then(() => {
      fs.promises.writeFile(
        `${distProjectPath}/package.json`,
        JSON.stringify({
          ...packageJsonStub,
          dependencies,
        })
      )
        .then(() =>
          console.log(`${distProjectPath}/package.json written successfully.`)
        )
        .catch(e => console.error(e))
    })
  }
)

add items to .gitignore

# Firebase
/.firebase
firebase-debug.log
ui-debug.log

replace functions project scripts in workspace.json

"targets": {
  "build-node": {
    "builder": "@nrwl/node:build",
    "options": {
      "outputPath": "dist/apps/functions",
      "main": "apps/functions/src/main.ts",
      "tsConfig": "apps/functions/tsconfig.app.json",
      "assets": ["apps/functions/src/assets"]
    },
    "configurations": {
      "production": {
        "optimization": true,
        "extractLicenses": true,
        "inspect": false,
        "fileReplacements": [
          {
            "replace": "apps/functions/src/environments/environment.ts",
            "with": "apps/functions/src/environments/environment.prod.ts"
          }
        ]
      }
    }
  },
  "build": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "commands": [
        {
          "command": "nx run functions:build-node"
        },
        {
          "command": "ts-node tools/scripts/build-firebase-functions-package-json.ts"
        }
      ],
      "parallel": false
    }
  },
  "serve": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "command": "nx run functions:build && firebase emulators:start --only functions --inspect-functions"
    }
  },
  "shell": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "command": "nx run functions:build && firebase functions:shell --inspect-functions"
    }
  },
  "start": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "command": "nx run functions:shell"
    }
  },
  "deploy": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "commands": [
        {
          "command": "nx run functions:build"
        },
        {
          "command": "firebase deploy --only functions"
        }
      ],
      "parallel": false
    }
  },
  "logs": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "command": "firebase funcions:log"
    }
  },
  "lint": {
    "builder": "@nrwl/linter:eslint",
    "options": {
      "lintFilePatterns": ["apps/functions/**/*.ts"]
    }
  },
  "test": {
    "builder": "@nrwl/jest:jest",
    "options": {
      "jestConfig": "apps/functions/jest.config.js",
      "passWithNoTests": true
    }
  }
}

replace console project scripts in workspace.json

"targets": {
  ...targets,
  "serve": {
    "builder": "@nrwl/web:dev-server",
    "options": {
      "buildTarget": "console:build"
    },
    "configurations": {
      "production": {
        "buildTarget": "console:build:production"
      }
    }
  },
  "deploy": {
    "builder": "@nrwl/workspace:run-commands",
    "options": {
      "commands": [
        {
          "command": "nx run console:build"
        },
        {
          "command": "firebase deploy --only hosting:console"
        }
      ],
      "parallel": false
    }
  },
}

setup hosting on firebase

add another site or use the autogenerated site and get site name

ex: fir-site-20243

get project name from settings

ex: gc-demo-4ed09

update .firebaserc:

"targets": {
  "gc-demo-4ed09": {
    "hosting": {
      "console": [
        "fir-site-20243"
      ]
    }
  }
}

deploy via nx

> nx deploy functions
> nx deploy console